// Program.cs
using ModelContextProtocol.Server;
using System.ComponentModel;
using Microsoft.Azure.Cosmos;
using Newtonsoft.Json;

var builder = WebApplication.CreateBuilder(args);
builder.Services.AddMcpServer()
    .WithHttpTransport()
    .WithToolsFromAssembly();
var app = builder.Build();

app.MapMcp();

app.Run("http://localhost:3001");

[McpServerToolType]
public static class EchoTool
{
    [McpServerTool, Description("Echoes the message back to the client.")]
    public static string Echo(string message) => $"hello {message}";
}

[McpServerToolType]
public static class CosmosDbTools
{
    // Environment variables used:
    // COSMOS_ENDPOINT, COSMOS_KEY, COSMOS_DATABASE, COSMOS_CONTAINER
    [McpServerTool, Description("Gets TOP 1 document from an Azure Cosmos DB container. Optional SQL WHERE clause can be provided.")]
    public static async Task<string> CosmosTop1(
        [Description("Optional SQL WHERE predicate without the WHERE keyword, e.g. c.type = 'order'")] string? whereClause = null)
    {
        try
        {
            var endpoint = Environment.GetEnvironmentVariable("COSMOS_ENDPOINT");
            var key = Environment.GetEnvironmentVariable("COSMOS_KEY");
            var databaseId = Environment.GetEnvironmentVariable("COSMOS_DATABASE");
            var containerId = Environment.GetEnvironmentVariable("COSMOS_CONTAINER");

            if (string.IsNullOrWhiteSpace(endpoint) || string.IsNullOrWhiteSpace(key) ||
                string.IsNullOrWhiteSpace(databaseId) || string.IsNullOrWhiteSpace(containerId))
            {
                return JsonConvert.SerializeObject(new
                {
                    error = "Missing required environment variables. Set COSMOS_ENDPOINT, COSMOS_KEY, COSMOS_DATABASE, COSMOS_CONTAINER."
                });
            }

            using var client = new CosmosClient(endpoint, key, new CosmosClientOptions
            {
                ApplicationName = "AzureCosmosDBMCP"
            });

            var container = client.GetContainer(databaseId, containerId);

            var queryText = string.IsNullOrWhiteSpace(whereClause)
                ? "SELECT TOP 1 c FROM c"
                : $"SELECT TOP 1 c FROM c WHERE {whereClause}";

            var iterator = container.GetItemQueryIterator<dynamic>(
                new QueryDefinition(queryText),
                requestOptions: new QueryRequestOptions { MaxItemCount = 1 }
            );

            while (iterator.HasMoreResults)
            {
                var page = await iterator.ReadNextAsync();
                foreach (var doc in page)
                {
                    return JsonConvert.SerializeObject(doc);
                }
            }

            return JsonConvert.SerializeObject(new { message = "No documents found." });
        }
        catch (CosmosException cex)
        {
            return JsonConvert.SerializeObject(new { error = cex.Message, statusCode = (int)cex.StatusCode });
        }
        catch (Exception ex)
        {
            return JsonConvert.SerializeObject(new { error = ex.Message });
        }
    }
}